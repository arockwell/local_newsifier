"""Initial database schema

Revision ID: 286f50253bde
Revises: 
Create Date: 2025-04-22 00:50:47.526430

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel
from sqlmodel.sql.sqltypes import AutoString

# revision identifiers, used by Alembic.
revision: str = '286f50253bde'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('test_model')
    op.drop_table('tablebase')
    op.alter_column('analysis_results', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('analysis_results', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('articles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('articles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('articles', 'title',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('articles', 'content',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               nullable=False)
    op.alter_column('articles', 'source',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('articles', 'published_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('articles', 'status',
               existing_type=sa.VARCHAR(),
               nullable=False)
    op.alter_column('articles', 'scraped_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('canonical_entities', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('canonical_entities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('canonical_entities', 'description',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.alter_column('canonical_entities', 'first_seen',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('canonical_entities', 'last_seen',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entities', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entities', 'confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('entity_mention_contexts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entity_mention_contexts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entity_mention_contexts', 'entity_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_mention_contexts', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_mention_contexts', 'context_text',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=False)
    op.drop_constraint('entity_mention_contexts_entity_id_fkey', 'entity_mention_contexts', type_='foreignkey')
    op.drop_constraint('entity_mention_contexts_article_id_fkey', 'entity_mention_contexts', type_='foreignkey')
    op.alter_column('entity_mentions', 'canonical_entity_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_mentions', 'entity_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_mentions', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_mentions', 'confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('entity_mentions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint('entity_mentions_entity_id_fkey', 'entity_mentions', type_='foreignkey')
    op.drop_constraint('entity_mentions_canonical_entity_id_fkey', 'entity_mentions', type_='foreignkey')
    op.drop_constraint('entity_mentions_article_id_fkey', 'entity_mentions', type_='foreignkey')
    op.add_column('entity_profiles', sa.Column('profile_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('entity_profiles', sa.Column('content', sqlmodel.sql.sqltypes.AutoString(), nullable=False))
    op.add_column('entity_profiles', sa.Column('profile_metadata', sa.JSON(), nullable=True))
    op.alter_column('entity_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entity_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entity_profiles', 'canonical_entity_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_unique_constraint('uix_entity_profile_type', 'entity_profiles', ['canonical_entity_id', 'profile_type'])
    op.drop_constraint('entity_profiles_canonical_entity_id_fkey', 'entity_profiles', type_='foreignkey')
    op.drop_column('entity_profiles', 'last_updated')
    op.drop_column('entity_profiles', 'related_topics')
    op.drop_column('entity_profiles', 'related_entities')
    op.drop_column('entity_profiles', 'mention_count')
    op.drop_column('entity_profiles', 'temporal_data')
    op.drop_column('entity_profiles', 'source_distribution')
    op.drop_column('entity_profiles', 'contexts')
    op.alter_column('entity_relationships', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entity_relationships', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('entity_relationships', 'source_entity_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_relationships', 'target_entity_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('entity_relationships', 'confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('entity_relationships', 'evidence',
               existing_type=sa.TEXT(),
               type_=sqlmodel.sql.sqltypes.AutoString(),
               existing_nullable=True)
    op.drop_constraint('entity_relationships_source_entity_id_fkey', 'entity_relationships', type_='foreignkey')
    op.drop_constraint('entity_relationships_target_entity_id_fkey', 'entity_relationships', type_='foreignkey')
    op.alter_column('opinion_trends', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('opinion_trends', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('opinion_trends', 'avg_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('opinion_trends', 'sentiment_count',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('sentiment_analyses', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('sentiment_analyses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('sentiment_analyses', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('sentiment_analyses', 'document_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('sentiment_analyses', 'document_magnitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('sentiment_analyses', 'analyzed_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_constraint('sentiment_analyses_article_id_fkey', 'sentiment_analyses', type_='foreignkey')
    op.alter_column('sentiment_shifts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('sentiment_shifts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('sentiment_shifts', 'start_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('sentiment_shifts', 'end_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('sentiment_shifts', 'shift_magnitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('sentiment_shifts', 'shift_percentage',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.alter_column('sentiment_shifts', 'supporting_article_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=False)
    op.alter_column('sentiment_shifts', 'detected_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('sentiment_shifts', 'detected_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sentiment_shifts', 'supporting_article_ids',
               existing_type=postgresql.JSON(astext_type=sa.Text()),
               nullable=True)
    op.alter_column('sentiment_shifts', 'shift_percentage',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('sentiment_shifts', 'shift_magnitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('sentiment_shifts', 'end_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('sentiment_shifts', 'start_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('sentiment_shifts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sentiment_shifts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_foreign_key('sentiment_analyses_article_id_fkey', 'sentiment_analyses', 'articles', ['article_id'], ['id'])
    op.alter_column('sentiment_analyses', 'analyzed_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sentiment_analyses', 'document_magnitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('sentiment_analyses', 'document_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('sentiment_analyses', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('sentiment_analyses', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('sentiment_analyses', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('opinion_trends', 'sentiment_count',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('opinion_trends', 'avg_sentiment',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('opinion_trends', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('opinion_trends', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_foreign_key('entity_relationships_target_entity_id_fkey', 'entity_relationships', 'canonical_entities', ['target_entity_id'], ['id'])
    op.create_foreign_key('entity_relationships_source_entity_id_fkey', 'entity_relationships', 'canonical_entities', ['source_entity_id'], ['id'])
    op.alter_column('entity_relationships', 'evidence',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('entity_relationships', 'confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('entity_relationships', 'target_entity_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_relationships', 'source_entity_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_relationships', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('entity_relationships', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.add_column('entity_profiles', sa.Column('contexts', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('entity_profiles', sa.Column('source_distribution', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('entity_profiles', sa.Column('temporal_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('entity_profiles', sa.Column('mention_count', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('entity_profiles', sa.Column('related_entities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('entity_profiles', sa.Column('related_topics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('entity_profiles', sa.Column('last_updated', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.create_foreign_key('entity_profiles_canonical_entity_id_fkey', 'entity_profiles', 'canonical_entities', ['canonical_entity_id'], ['id'])
    op.drop_constraint('uix_entity_profile_type', 'entity_profiles', type_='unique')
    op.alter_column('entity_profiles', 'canonical_entity_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_profiles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('entity_profiles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_column('entity_profiles', 'profile_metadata')
    op.drop_column('entity_profiles', 'content')
    op.drop_column('entity_profiles', 'profile_type')
    op.create_foreign_key('entity_mentions_article_id_fkey', 'entity_mentions', 'articles', ['article_id'], ['id'])
    op.create_foreign_key('entity_mentions_canonical_entity_id_fkey', 'entity_mentions', 'canonical_entities', ['canonical_entity_id'], ['id'])
    op.create_foreign_key('entity_mentions_entity_id_fkey', 'entity_mentions', 'entities', ['entity_id'], ['id'])
    op.alter_column('entity_mentions', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('entity_mentions', 'confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('entity_mentions', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_mentions', 'entity_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_mentions', 'canonical_entity_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.create_foreign_key('entity_mention_contexts_article_id_fkey', 'entity_mention_contexts', 'articles', ['article_id'], ['id'])
    op.create_foreign_key('entity_mention_contexts_entity_id_fkey', 'entity_mention_contexts', 'entities', ['entity_id'], ['id'])
    op.alter_column('entity_mention_contexts', 'context_text',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('entity_mention_contexts', 'article_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_mention_contexts', 'entity_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('entity_mention_contexts', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('entity_mention_contexts', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('entities', 'confidence',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('entities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('entities', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('canonical_entities', 'last_seen',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('canonical_entities', 'first_seen',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('canonical_entities', 'description',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('canonical_entities', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('canonical_entities', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('articles', 'scraped_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('articles', 'status',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('articles', 'published_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('articles', 'source',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('articles', 'content',
               existing_type=sqlmodel.sql.sqltypes.AutoString(),
               type_=sa.TEXT(),
               nullable=True)
    op.alter_column('articles', 'title',
               existing_type=sa.VARCHAR(),
               nullable=True)
    op.alter_column('articles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('articles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('analysis_results', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('analysis_results', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.create_table('tablebase',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='tablebase_pkey')
    )
    op.create_table('test_model',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='test_model_pkey')
    )
    # ### end Alembic commands ###
