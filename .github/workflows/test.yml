name: Tests

# CI Environment Documentation
# ---------------------------
# This workflow sets up a test environment for the local_newsifier project with:
#
# 1. Python 3.12 environment
# 2. Poetry for dependency management
# 3. PostgreSQL 17 for database testing
# 4. SpaCy models for NLP functionality
#
# Key considerations:
# - Dependencies are managed exclusively through Poetry to ensure consistency
# - The virtualenv cache expires weekly to detect potential dependency conflicts
# - PR/main branch environments are kept identical to prevent unexpected failures on merge
# - No direct pip installs are used to avoid conflicting with Poetry-managed dependencies
# - The cache is keyed to both poetry.lock file changes and a weekly timestamp

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # Add support for PRs targeting other PRs
  pull_request_target:
    branches-ignore: [ main ]

jobs:
  test:
    # Security check for pull_request_target
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'pull_request') ||
      (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name == github.repository)

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.12"]

    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # For pull_request_target events, checkout the PR head
        ref: ${{ github.event_name == 'pull_request_target' && github.event.pull_request.head.sha || '' }}

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Get current date info
      id: date
      run: echo "week=$(date +%Y%V)" >> $GITHUB_OUTPUT

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 2.1.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Cache Poetry virtualenv
      uses: actions/cache@v4
      id: cache
      with:
        path: .venv
        # Adding a weekly expiration based on the week number of the year
        # This ensures a fresh environment at least once a week to catch dependency issues
        key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}-${{ steps.date.outputs.week }}

    - name: Install dependencies
      run: |
        poetry install --no-interaction --with dev
        # Note: Dependencies like psycopg2-binary, sqlalchemy, and pydantic-settings
        # are already managed by Poetry and should not be installed separately

    - name: Download spaCy models
      run: |
        poetry run python -m spacy download en_core_web_sm
        poetry run python -m spacy download en_core_web_lg

    - name: Run pre-commit
      run: |
        poetry run pre-commit run --all-files --show-diff-on-failure --color always

    - name: Create test database
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
      run: |
        poetry run python -c "
        import psycopg2
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            user='postgres',
            password='postgres',
            database='postgres'
        )
        conn.autocommit = True
        cur = conn.cursor()
        cur.execute('DROP DATABASE IF EXISTS test_db')
        cur.execute('CREATE DATABASE test_db')
        cur.close()
        conn.close()
        "

    - name: Create tables and initialize database
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_db
      run: |
        # Create tables for testing
        poetry run python -c "
        from sqlmodel import SQLModel, create_engine
        from local_newsifier.models.article import Article
        from local_newsifier.models.entity import Entity
        from local_newsifier.models.analysis_result import AnalysisResult
        from local_newsifier.models.entity_tracking import CanonicalEntity, EntityProfile
        from local_newsifier.models.entity_tracking import EntityRelationship, EntityMentionContext
        from local_newsifier.models.sentiment import SentimentShift

        # Create PostgreSQL test engine
        db_url = 'postgresql://postgres:postgres@localhost:5432/test_db'
        engine = create_engine(db_url, echo=True)

        # Create all tables
        SQLModel.metadata.create_all(engine)
        print('Tables created successfully')
        "

    - name: Run tests with coverage
      env:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_DB: test_db
        TEST_DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        poetry run pytest --cov=src/local_newsifier --cov-report=xml --cov-report=term-missing --cov-fail-under=70 tests/

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage.xml
